/**
 * 知识点：static关键字
 * 用法：是一个修饰符，用于修饰成员（成员变量，成员函数）
 * 当成员被静态修饰后，就多了一个调用方式，除了可以被对象调用外，还可以直接被类名调用，
 * 调用方式是：类名 . 静态成员
 *
 * 被static修饰的特点：
 *  1.随着类的加载而加载，即静态会随着类的消失而消失，生命周期最长
 *  2.优先于对象存在，明确一点：静态是先存在的，对象是后存在的
 *  3.可以被所有对象共享
 *  4.可以被类名调用
 *
 *  实例变量和类变量的区别:
 *   1.存放位置：
 *       类变量随着类的加载而存在于方法区中，
 *       实例变量随着对象的建立而存在于堆内存中
 *   2.生命周期
 *       类变量的生命周期最长，随着类的消失而消失，
 *       实例变量的生命周期随着对象的消失而消失
 *
 * 静态的使用注意事项：
 *   1.静态变量生命周期长，对内存消耗大，不建议过多定义
 *   2.静态方法只能访问静态成员,非静态方法可以访问静态成员和非静态成员
 *   3.静态方法中不可以定义this，super关键字，因为静态优先于对象存在
 *   4.主函数是静态的
 *
 * 静态有利有弊：
 *   1.利：对对象的共享数据进行单独存储，节省空间（因为不必在每个对象中都存储一份）；
 *         可以直接被类名调用
 *   2.弊：生命周期过长；
 *         访问出现局限性（静态虽好，却只能访问静态）
 *
 * 什么时候使用静态（静态变量，静态函数）：
 *   静态变量（类变量）：当对象中出现共享数据（值）时；对象的特有数据要定义成非静态存在于堆内存中
 *   静态函数：当功能内部没有访问到非静态数据（对象的特有数据）时，该功能可以定义成静态的
 *
 * 方法区：
 *
 */
public class Begin10 {
    String name;   //成员变量，实例变量
    static String country = "China";  //静态的成员变量，类变量
    public void show(){

        System.out.println(name+"...."+country);
    }
}
class StaticDemo{
    public static void main(String[] args){
        //Begin10 p = new Begin10();
        System.out.println(Begin10.country);
    }
}


